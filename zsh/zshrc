# ===================================================================
# Enhanced ZSH Configuration for Development
# ===================================================================

# Path configuration
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Oh My Zsh configuration
export ZSH=~/.oh-my-zsh
ZSH_THEME="pixegami-agnoster"

# Plugins
plugins=(
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
  docker
  docker-compose
  npm
  node
  python
  golang
  extract
  colored-man-pages
  command-not-found
  # Enhanced productivity plugins
  jsontools          # JSON utilities: pp_json, is_json, urlencode_json, urldecode_json
  web-search         # Search from terminal: google "query", stackoverflow "query"
  copyfile           # Copy file content to clipboard: copyfile ~/.zshrc
  sudo               # Press ESC twice to add sudo to current/previous command
)

source $ZSH/oh-my-zsh.sh

# ===================================================================
# Editor Configuration (Vim Integration)
# ===================================================================
export EDITOR='vim'
export VISUAL='vim'

# Enable vi mode in shell
set -o vi

# Better vi mode indicators
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select

# ===================================================================
# Development Environment Setup
# ===================================================================

# Java version switcher functions
export JAVA_HOME_17=/usr/lib/jvm/java-17-openjdk-amd64
export JAVA_HOME_21=/usr/lib/jvm/java-21-openjdk-amd64
export JAVA_HOME=$JAVA_HOME_21

setJdk17() { 
    export JAVA_HOME=$JAVA_HOME_17
    export PATH=$JAVA_HOME/bin:$PATH
    echo "Java 17 activated: $(java -version 2>&1 | head -n1)"
}

setJdk21() { 
    export JAVA_HOME=$JAVA_HOME_21
    export PATH=$JAVA_HOME/bin:$PATH
    echo "Java 21 activated: $(java -version 2>&1 | head -n1)"
}

# Node.js (NVM integration with lazy loading for faster shell startup)
export NVM_DIR="$HOME/.nvm"

# Lazy load NVM - only load when needed
lazy_load_nvm() {
    unset -f nvm node npm npx
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
}

# Create wrapper functions that trigger lazy loading
nvm() { lazy_load_nvm; nvm "$@"; }
node() { lazy_load_nvm; node "$@"; }
npm() { lazy_load_nvm; npm "$@"; }
npx() { lazy_load_nvm; npx "$@"; }

# Go configuration
export GOPATH=$HOME/go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

# Python configuration
export PATH=$HOME/.local/bin:$PATH

# ===================================================================
# Aliases - Development Focused
# ===================================================================

# Vim aliases
alias v='vim'
alias vi='vim'
alias vimrc='vim ~/.vimrc'
alias zrc='vim ~/.zshrc'

# Enhanced ls aliases
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias lt='ls -ltr'
alias lh='ls -lah'

# Enhanced git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline -10'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'

# Enhanced Git Commands
alias gst='git status -sb'           # Short format with branch info
alias glog='git log --oneline --graph --decorate --all -20'
alias gdiff='git diff --word-diff'   # Word-level diff
alias gundo='git reset --soft HEAD~1'
alias gclean='git clean -fd && git reset --hard'
alias gpull='git pull --rebase --autostash'

# Development aliases
alias py='python3'
alias pip='pip3'
alias serve='python3 -m http.server'
alias jsonpp='python3 -m json.tool'

# Docker aliases
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias di='docker images'

# System aliases
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias h='history'
alias c='clear'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# File operations
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias mkdir='mkdir -pv'

# Network and system info
alias myip='curl -s http://whatismyip.akamai.com/'
alias ports='netstat -tulanp'
alias meminfo='free -m -l -t'
alias cpuinfo='lscpu'
alias diskusage='df -h'

# Quick directory navigation
alias proj='cd ~/Projects'
alias docs='cd ~/Documents'
alias dwn='cd ~/Downloads'
alias repos='cd ~/Projects/repos'

# Coffee Aliases
alias coffee="echo â˜• Brewing inspiration..."

# Modern CLI Tools (install with: cargo install eza bat fd-find ripgrep)
if command -v eza >/dev/null 2>&1; then
    alias ls='eza --icons'
    alias ll='eza -l --icons --git'
    alias la='eza -la --icons --git'
    alias lt='eza -l --sort=modified --icons'
    alias tree='eza --tree --icons'
fi

if command -v bat >/dev/null 2>&1; then
    alias cat='bat --paging=never'
    alias less='bat'
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

if command -v fd >/dev/null 2>&1; then
    alias find='fd'
fi

if command -v rg >/dev/null 2>&1; then
    alias grep='rg'
fi

# Git Enhanced with tig
if command -v tig >/dev/null 2>&1; then
    alias tigs='tig status'     # Interactive git status
    alias tigl='tig'            # Interactive git log
    alias tigb='tig --branches' # All branches view
fi

# ===================================================================
# Functions - Enhanced Productivity
# ===================================================================

# Quick project creation
mkproject() {
    if [ -z "$1" ]; then
        echo "Usage: mkproject <project_name>"
        return 1
    fi
    mkdir -p ~/Projects/$1
    cd ~/Projects/$1
    git init
    echo "# $1" > README.md
    echo "Created project: $1"
}

# Extract function
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find and edit files quickly
vf() {
    local file
    file=$(find . -type f -name "*$1*" | head -1)
    if [ -n "$file" ]; then
        vim "$file"
    else
        echo "File not found: *$1*"
    fi
}

# Quick grep in files
grepf() {
    if [ -z "$1" ]; then
        echo "Usage: grepf <pattern> [file_pattern]"
        return 1
    fi
    local pattern=$1
    local files=${2:-"*"}
    grep -r --include="$files" "$pattern" .
}

# Process management
psg() {
    ps aux | grep -v grep | grep "$1"
}

# Smart cd with fuzzy finding (requires fzf)
if command -v fzf >/dev/null 2>&1; then
    fcd() {
        local dir
        dir=$(find ${1:-.} -type d 2>/dev/null | fzf --height 40% --border) && cd "$dir"
    }
    
    # Quick file editing with fuzzy search and preview
    vff() {
        local file
        file=$(find . -type f 2>/dev/null | fzf --height 40% --border --preview 'bat --color=always {}') && vim "$file"
    }
fi

# Better project creation with templates
mkproject() {
    local name="$1"
    local template="${2:-basic}"
    
    [[ -z "$name" ]] && { echo "Usage: mkproject <name> [template]"; return 1; }
    
    mkdir -p ~/Projects/"$name" && cd ~/Projects/"$name"
    git init
    
    case "$template" in
        "node") 
            echo '{"name":"'$name'","version":"1.0.0","main":"index.js"}' > package.json 
            echo "console.log('Hello from $name');" > index.js
            ;;
        "python") 
            touch requirements.txt 
            echo "# $name" > README.md
            echo "#!/usr/bin/env python3" > main.py
            ;;
        "go") 
            go mod init "$name" 
            echo "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello from $name\")\n}" > main.go
            ;;
        *) 
            echo "# $name\n\nA new project." > README.md 
            ;;
    esac
    
    echo "Created $template project: $name"
}

# Git utility functions (gwip is provided by Oh My Zsh git plugin)
gsync() { 
    echo "Syncing with remote..."
    git pull --rebase --autostash && git push 
}

# Git branch management
gnew() {
    [[ -z "$1" ]] && { echo "Usage: gnew <branch-name>"; return 1; }
    git checkout -b "$1"
}

gswitch() {
    local branch
    branch=$(git branch | fzf --height 20% | sed 's/^[ *]*//')
    [[ -n "$branch" ]] && git checkout "$branch"
}

# Custom clipboard functions (replacing copydir plugin)
copydir() {
    [[ -z "$1" ]] && local dir="$(pwd)" || local dir="$1"
    [[ -d "$dir" ]] || { echo "Directory not found: $dir"; return 1; }
    realpath "$dir" | tr -d '\n' | xclip -selection clipboard 2>/dev/null || echo "$(realpath "$dir")"
    echo "Directory path copied: $(realpath "$dir")"
}

# ===================================================================
# Development Environment Utilities
# ===================================================================

# PostgreSQL Database Management
if command -v psql >/dev/null 2>&1; then
    # List all databases
    psql-list() {
        psql -U postgres -c "\l"
    }
    
    # Create database
    psql-create() {
        [[ -z "$1" ]] && { echo "Usage: psql-create <dbname>"; return 1; }
        createdb -U postgres "$1"
        echo "Database '$1' created"
    }
    
    # Drop database  
    psql-drop() {
        [[ -z "$1" ]] && { echo "Usage: psql-drop <dbname>"; return 1; }
        read "response?Are you sure you want to drop database '$1'? (y/N): "
        [[ "$response" =~ ^[Yy]$ ]] && dropdb -U postgres "$1" && echo "Database '$1' dropped"
    }
    
    # Connect to database
    psql-connect() {
        local db="${1:-postgres}"
        psql -U postgres -d "$db"
    }
fi

# Docker Management Utilities  
if command -v docker >/dev/null 2>&1; then
    # Execute shell in running container
    dexec() {
        [[ -z "$1" ]] && { echo "Usage: dexec <container-name-or-id>"; return 1; }
        docker exec -it "$1" /bin/bash 2>/dev/null || docker exec -it "$1" /bin/sh
    }
    
    # Follow container logs
    dlogs() {
        [[ -z "$1" ]] && { echo "Usage: dlogs <container-name-or-id>"; return 1; }
        docker logs -f "$1"
    }
    
    # Clean up Docker system
    dclean() {
        echo "Cleaning up Docker system..."
        docker system prune -f
        docker image prune -f
        echo "Docker cleanup complete"
    }
    
    # Show container resource usage
    dstats() {
        docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
    }
    
    # Quick container management
    dstop() { docker stop "$1"; }
    dstart() { docker start "$1"; }
    drmi() { docker rmi "$1"; }
fi

# Development Server Management
serve-py() {
    local port="${1:-8000}"
    echo "Starting Python server on port $port"
    python3 -m http.server "$port"
}

serve-node() {
    local port="${1:-3000}"
    [[ ! -f "package.json" ]] && { echo "No package.json found"; return 1; }
    echo "Starting Node.js server on port $port"
    npm start
}

# Environment Information Display
devinfo() {
    echo "=== Development Environment Info ==="
    echo "OS: $(uname -s) $(uname -r)"
    echo "Shell: $SHELL"
    echo "Java: $(java -version 2>&1 | head -1 | cut -d'"' -f2 2>/dev/null || echo 'Not installed')"
    echo "Python: $(python3 --version 2>/dev/null | cut -d' ' -f2 || echo 'Not installed')"
    echo "Node.js: $(node --version 2>/dev/null || echo 'Not installed')"
    echo "Go: $(go version 2>/dev/null | cut -d' ' -f3 || echo 'Not installed')"
    echo "Docker: $(docker --version 2>/dev/null | cut -d' ' -f3 | tr -d ',' || echo 'Not installed')"
    echo "Git: $(git --version | cut -d' ' -f3)"
    echo "Current Directory: $(pwd)"
    [[ -d .git ]] && echo "Git Branch: $(git branch --show-current 2>/dev/null)"
}

# Project Environment Setup
setup-env() {
    local project_type="$1"
    
    case "$project_type" in
        "node"|"js"|"javascript")
            echo "Setting up Node.js environment..."
            [[ ! -f package.json ]] && npm init -y
            npm install --save-dev eslint prettier
            echo "Node.js environment setup complete"
            ;;
        "python"|"py")
            echo "Setting up Python environment..."
            python3 -m venv venv
            echo "Virtual environment created. Activate with: source venv/bin/activate"
            ;;
        "go")
            echo "Setting up Go environment..."
            [[ ! -f go.mod ]] && go mod init "$(basename $(pwd))"
            echo "Go module initialized"
            ;;
        *)
            echo "Usage: setup-env <node|python|go>"
            echo "  node    - Initialize package.json, install eslint & prettier"
            echo "  python  - Create virtual environment"  
            echo "  go      - Initialize go module"
            ;;
    esac
}

# ===================================================================
# History Configuration
# ===================================================================
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS

# ===================================================================
# Performance and Behavior
# ===================================================================
setopt AUTO_LIST
setopt AUTO_MENU
setopt ALWAYS_TO_END
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT
setopt EXTENDED_GLOB
setopt NO_CASE_GLOB

# ===================================================================
# Terminal and Display
# ===================================================================
export TERM=xterm-256color
export LESS='-R'
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# ===================================================================
# Completion Enhancements
# ===================================================================
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

# ===================================================================
# Conditional Loading
# ===================================================================
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
[ -f ~/.zshrc.work ] && source ~/.zshrc.work
[ -f ~/.zshrc.paths ] && source ~/.zshrc.paths

# ================================
# Minimal Portable Welcome Message
# ================================
[[ $- != *i* ]] && return

# --- Color setup using ANSI codes (works almost everywhere) ---
if [[ -t 1 ]]; then
    BOLD="\033[1m"; RESET="\033[0m"
    WHITE="\033[37m"; CYAN="\033[36m"; MAGENTA="\033[35m"; GREEN="\033[32m"; YELLOW="\033[33m"
else
    BOLD=""; RESET=""; WHITE=""; CYAN=""; MAGENTA=""; GREEN=""; YELLOW=""
fi

# --- Simple white separator ---
hr() {
  printf "${WHITE}%s${RESET}\n" "----------------------------------------"
}

# --- Welcome Info ---
hr
echo -e "${MAGENTA}${BOLD}Welcome, $(whoami)!${RESET}"
echo -e "${BOLD}Date:${RESET} $(date '+%Y-%m-%d %H:%M')"
echo -e "${BOLD}Dir:${RESET} $(pwd)"
if command -v git >/dev/null 2>&1 && git rev-parse --git-dir >/dev/null 2>&1; then
  printf "${BOLD}Branch:${RESET} %s\n" "$(git branch --show-current 2>/dev/null)"
fi
hr

# --- Coffee Quote (wrapped to ~40 characters for readability) ---
_generate_coffee_quote() {
  local quotes=(
    "Coffee first, problems later."
    "Espresso yourself before you depresso."
    "Life happens, coffee helps."
    "Behind every successful developer is a strong cup of coffee."
    "Procaffeinating: not starting anything until coffee is brewed."
    "Java keeps my code compiling and my brain awake."
    "Beans to bytes: compile, sip, repeat."
  )
  local q="${quotes[$(($RANDOM % ${#quotes[@]} + 1))]}"
  [[ "$LANG" == *"UTF-8"* ]] && q="â˜• $q"
  echo "$q" | while read -r l; do
    printf "${CYAN}%s${RESET}\n" "$l"
  done
}
_generate_coffee_quote
hr

# ============================
# Random "caf" Command
# ============================
caf() {
  # Colors (safe fallback)
  local RESET="\033[0m" CYAN="\033[36m" MAGENTA="\033[35m" YELLOW="\033[33m"

  # --- Coffee Fortunes ---
  local fortunes=(
    "Today's brew: Courage, with a shot of chaos."
    "Coffee is temporary, code reviews are forever."
    "The mug chooses the programmer."
    "Your caffeine intake today will make you write elegant regex."
    "Beans whisper: Ship it to prod. Ignore QA."
  )

  local mode=$((RANDOM % 2))
  local fortune_index=$(((RANDOM % ${#fortunes[@]}) + 1))

  case $mode in
    0) # Coffee fortune
      printf '%b%s%b\n' "$MAGENTA" "${fortunes[$fortune_index]}" "$RESET"
      ;;
    1) # Coffee brewing animation
      printf '%b%s%b' "$YELLOW" "Brewing coffee" "$RESET"
      for i in {1..5}; do
        printf "."
        sleep 0.2
      done
      printf ' Ready!\n'
      ;;
  esac
}

# ===================================================================
# Starship Prompt (must be at the end)
# ===================================================================
eval "$(starship init zsh)"
